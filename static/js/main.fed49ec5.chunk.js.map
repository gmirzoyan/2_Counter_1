{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","onClick","counterMinus","index","el","counterPlus","className","counterReset","deleteCurrentCounter","App","useState","counterList","setCounterList","result","map","i","console","log","counterResetAll","filter","pop","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uLA0CeA,MAxCf,SAAcC,GAsBV,OAEI,6BACI,4BAAQC,QAlBW,WACvBD,EAAME,aAAaF,EAAMG,SAiBrB,KACC,IACAH,EAAMI,GACN,IACD,4BAAQH,QA3BU,WACtBD,EAAMK,YAAYL,EAAMG,SA0BpB,KACC,IACD,4BAAQG,UAAU,SAASL,QAnBR,WACvBD,EAAMO,aAAaP,EAAMG,SAkBrB,SACC,IACD,4BAAQG,UAAU,SAASL,QAhBA,WAC/BD,EAAMQ,qBAAqBR,EAAMG,SAe7B,YC4DGM,MAzFf,WAAgB,IAAD,EAE2BC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAFjD,mBAEJC,EAFI,KAESC,EAFT,KAILP,EAAc,SAACF,GACjB,IAAMU,EAASF,EAAYG,KAAI,SAACV,EAAIW,GAE5B,OADIA,IAAMZ,GAAOC,IACVA,KAGfQ,EAAeC,IAGbX,EAAe,SAACC,GAClB,IAAMU,EAASF,EAAYG,KAAI,SAACV,EAAIW,GAE5B,OADIA,IAAMZ,GAAOC,IACVA,KAGfQ,EAAeC,IAGbN,EAAe,SAACJ,GAClB,IAAMU,EAASF,EAAYG,KAAI,SAACV,EAAIW,GAC5B,OAAIA,IAAMZ,EAAc,EACjBC,KAGfY,QAAQC,IAAIJ,GACZD,EAAeC,IAGbK,EAAkB,WACpB,IAAML,EAASF,EAAYG,KAAI,SAAAV,GAAE,OAAU,KAC3CQ,EAAeC,IAcbL,EAAuB,SAACL,GAC1B,IAAIU,EAASF,EAAYQ,QAAO,SAACf,EAAIW,GACjC,GAAGA,IAAMZ,EAAO,OAAO,KAE3BS,EAAeC,IAOnB,OACI,6BAEI,6CACA,6BACA,6BACA,4BAAQP,UAAU,SAASL,QAASiB,GAApC,aACC,IACD,4BAAQZ,UAAU,SAASL,QA9Bb,WAClB,IAAMY,EAAM,sBAAOF,GAAP,CAAoB,IAC5BC,EAAeC,KA4Bf,WACC,IACD,4BAAQP,UAAU,SAASL,QA3Bb,WAClBU,EAAYS,MACZ,IAAMP,EAAM,YAAOF,GACnBC,EAAeC,KAwBX,kBACC,IACD,4BAAQP,UAAU,SAASL,QAhBjB,WACdW,EAAe,MAeX,cACA,6BACA,6BAECD,EAAYG,KAAI,SAACV,EAAIW,GAAL,OAAW,kBAAC,EAAD,CACxBM,IAAKN,EACLX,GAAIA,EACJD,MAAOY,EACPV,YAAaA,EACbH,aAAcA,EACdK,aAAcA,EACdW,gBAAiBA,EACjBV,qBAAsBA,SC7ElBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.fed49ec5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction List(props) {\n\n    const buttonHandlerPlus = () => {\n        props.counterPlus(props.index)\n\n    }\n\n    const buttonHandlerMinus = () => {\n        props.counterMinus(props.index)\n\n    }\n\n    const buttonHandlerReset = () => {\n        props.counterReset(props.index)\n\n    }\n\n    const buttonDeleteCurrentCounter = () => {\n        props.deleteCurrentCounter(props.index)\n    }\n\n\n    return (\n\n        <div>\n            <button onClick={buttonHandlerMinus}>-</button>\n            {\" \"}\n            {props.el}\n            {\" \"}\n            <button onClick={buttonHandlerPlus}>+</button>\n            {\" \"}\n            <button className='header' onClick={buttonHandlerReset}>Reset</button>\n            {\" \"}\n            <button className='header' onClick={buttonDeleteCurrentCounter}>Delete</button>\n\n        </div>\n\n    );\n}\n\nexport default List;","import React, {useState} from 'react';\nimport './index.css';\nimport List from \"./List\";\n\n\n\nfunction App() {\n\n    const [counterList, setCounterList] = useState([0, 0, 0, 0, 0]);\n\n    const counterPlus = (index) => {\n        const result = counterList.map((el, i) => {\n                if (i === index) el++;\n                return el;\n            }\n        )\n        setCounterList(result);\n    }\n\n    const counterMinus = (index) => {\n        const result = counterList.map((el, i) => {\n                if (i === index) el--;\n                return el;\n            }\n        )\n        setCounterList(result);\n    }\n\n    const counterReset = (index) => {\n        const result = counterList.map((el, i) => {\n                if (i === index) return 0;\n                return el;\n            }\n        )\n        console.log(result);\n        setCounterList(result);\n    }\n\n    const counterResetAll = () => {\n        const result = counterList.map(el =>  el = 0)\n        setCounterList(result);\n    }\n\n    const addNewCounter = () => {\n        const result = [...counterList, 0]\n            setCounterList(result);\n    }\n\n    const deleteCounter = () => {\n        counterList.pop()\n        const result = [...counterList]\n        setCounterList(result);\n    }\n\n    const deleteCurrentCounter = (index) => {\n        let result = counterList.filter((el, i) => {\n            if(i !== index) return true;\n        })\n        setCounterList(result);\n    }\n\n    const deleteAll = () => {\n        setCounterList([])\n    }\n\n    return (\n        <div>\n\n            <h2>C O U N T E R</h2>\n            <br/>\n            <br/>\n            <button className='header' onClick={counterResetAll}>Reset All</button>\n            {\" \"}\n            <button className='header' onClick={addNewCounter}>Add New</button>\n            {\" \"}\n            <button className='header' onClick={deleteCounter}>Delete Counter</button>\n            {\" \"}\n            <button className='header' onClick={deleteAll}>DELETE ALL</button>\n            <br/>\n            <br/>\n\n            {counterList.map((el, i) => <List\n                key={i}\n                el={el}\n                index={i}\n                counterPlus={counterPlus}\n                counterMinus={counterMinus}\n                counterReset={counterReset}\n                counterResetAll={counterResetAll}\n                deleteCurrentCounter={deleteCurrentCounter}\n            />)}\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}